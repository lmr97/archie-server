// I know imports like this are less than ideal, but should 
// be okay on this scale. If there are more packages than this, 
// I will probably switch over to the Browserify bundler.
import { Spinner } from 'spin.js';
import ProgressBar from 'progressbar.js';

var spinOpts = {
    lines: 12,
    length: 30,
    width: 4,
    radius: 20,
    scale: 0.5,
    corners: 0.2,
    speed: 1,
    rotate: 0,
    animation: "spinner-line-fade-default",
    direction: 1,
    color: "#ffffff",
    fadeColor: "black",
    shadow: "0 0 1px transparent",
    zIndex: 2000000000,
    className: "spinner",
    position: "relative",
 
};

var barOpts = {
    strokeWidth: 2, 
    easing: 'easeOut', 
    color: '#32CD32',
};

let buttonDiv  = document.getElementById("button-container");
let spinner    = new Spinner(spinOpts);
let loadingBar = new ProgressBar.Line(".button-container", barOpts);


// function from: https://stackoverflow.com/a/33542499
function save(filename, data) {
    const blob = new Blob([data], {type: 'text/csv'});
    if(window.navigator.msSaveOrOpenBlob) {
        window.navigator.msSaveBlob(blob, filename);
    }
    else{
        const elem = window.document.createElement('a');
        elem.href = window.URL.createObjectURL(blob);
        elem.download = filename; 

        document.body.appendChild(elem);
        elem.click();        
        document.body.removeChild(elem);

        window.URL.revokeObjectURL(elem.href);
    }
}


function resetLoadingBar(convMsg, originalButton) {
    spinner.stop();
    loadingBar.animate(0, {duration: 0});
    buttonDiv.removeChild(convMsg);
    buttonDiv.appendChild(originalButton);
}

function errorNotify(message) {
    console.error(`Error occurred in fetching req: ${message}`);
    if (message['row'] == "422 UNPROCESSABLE CONTENT") {
        alert("The URL entered doesn't appear to be a valid Letterboxd list. \
            Try checking the link and running it again.");
    } 
    else if (message['row'] == "403 FORBIDDEN") {
        alert("The server does not accept conversion requests for \
            lists over 10,000 films long. Is there a shorter list we can try?");
    }
    else { alert("There was an issue with the server in processing your request. \
        My apologies."); }
}

function collectSaveList(fetchUrl, listName, originalButton) {
    // add "Converting..." message
    var convMsg = document.createElement("h3");
    convMsg.textContent = "Converting...";
    convMsg.style = "text-align: center";
    buttonDiv.appendChild(convMsg);

    spinner.spin(buttonDiv);    // run spinner until loading bar loads
    const evtSource = new EventSource(fetchUrl);

    let list = [];
    let rowsReceived = 0;

    evtSource.onmessage = (event) => {
        console.debug(`message: ${event.data}`);
        var msgData = JSON.parse(event.data);

        rowsReceived += 1;
        var ratioDone = rowsReceived/msgData.totalRows;
        loadingBar.animate(ratioDone, {duration: 500});

        list.push(msgData.rowData);
        spinner.stop();
    };

    // If there is an issue, close out the connection
    evtSource.onerror = (event) => {
        // server emits a mystery error event during the conversion stream
        // (somehow, I sincerely don't know where from), but it is without content.
        // All the messages (including errors) I defined on the server have content.
        // So this conditional is a way to filter that phantom error out.
        if (!event.data) return;  
        var msg = JSON.parse(event.data);
        errorNotify(msg);
        
        // reset loading bar and replace button for another request
        resetLoadingBar(convMsg, originalButton); 
        evtSource.close(); 
    };

    evtSource.addEventListener("complete", (_) => {
        console.log("Stream complete");
        resetLoadingBar(convMsg, originalButton); 

        let csv = list.join("\n");
        save(`${listName}.csv`, csv);
        evtSource.close();
    } );
}


async function getLBlist() {
    let lbURL = document.getElementById("lb-url").value;

    // replace button with loading bar
    let button = buttonDiv.removeChild(
        buttonDiv.querySelector(".lb-list-submit-button")
    );

    let checkedElements = document
        .querySelectorAll('input[type="checkbox"]:checked');

    // Letterboxd list URLs follow this structure:
    //
    //    https://letterboxd.com/<username>/list/<listname>/
    // 
    // Since `lbURLsplit` is an Array, generated by splitting the URL
    // string on  `/`, we can get the desired elements out of the URL by 
    // indexing into it. This is preferable over forwarding the URL to
    // the server, since it elimates the opportunity to inject a malicious
    // URL wholesale into the server.
    var lbURLsplit  = lbURL.split("/").slice(0,-1); // last element is a null string
    const listName = lbURLsplit.at(-1);  
    const author    = lbURLsplit.at(-3);

    let attrsUrlForm = "attrs=none";

    if (checkedElements.length > 0) {

        let attrList = new Array(checkedElements.length);
        for (let i = 0; i < checkedElements.length; i++) {
            attrList[i] = checkedElements[i].id;
        }
        attrsUrlForm = attrList.map((a) => "attrs="+a).join("&");
    }

    // attrs array necessitates a custom URL encoding for request query 
    // (snake-case for URL, for Rust API)
    let fetchURL = "/lb-list-app/conv?"
        + "list_name="   + listName  + "&"
        + "author_user=" + author    + "&"
        + attrsUrlForm;
    
    collectSaveList(fetchURL, listName, button);
}

document
    .querySelector("button")
    .addEventListener(
        "click", getLBlist
    );