import {Spinner} from '/node_modules/spin.js/spin.js';

var spinOpts = {
    lines: 12,
    length: 30,
    width: 4,
    radius: 20,
    scale: 0.5,
    corners: 0.2,
    speed: 1,
    rotate: 0,
    animation: "spinner-line-fade-default",
    direction: 1,
    color: "#ffffff",
    fadeColor: "black",
    shadow: "0 0 1px transparent",
    zIndex: 2000000000,
    className: "spinner",
    position: "relative",
};



// "URL validity", for our purposes, means "returns 200 OK"
function URLisValid (url) {

    // definitely open to there being a better way to do this
    try {
        fetch(url, {credentials: "same-origin"}).then(
            (resp) => {
                if (!resp.ok) {
                    throw new Error(`Invalid URL: ${resp.url}`)
                }
            }
        );
    }
    catch (e) {
        console.error(`URL caused the following error: ${e}`);
        return false
    }

    return true;
}


// displays error message in the HTML, depending on URL validity
// returns boolean whether the error was displayed or not
function displayError(url) {
    let URLdiv = document.getElementById("lb-url-container");
    let errElement = document.getElementById("err-msg");

    // start by removing the error, if it exists.
    if (errElement) URLdiv.removeChild(errElement);

    // If the URL is valid, nothing will be shown,
    // since the error has already been cleared
    if (!URLisValid(url)) {
        // console error reporting handled in URLisValid()

        // add error message to HTML
        let errorChild = document.createElement("p");
        errorChild.id = "err-msg";
        errorChild.style.color = "red";

        URLdiv.appendChild(errorChild);
        return true;
    } 

    return false;
}


// function from: https://stackoverflow.com/a/33542499
function save(filename, data) {
    const blob = new Blob([data], {type: 'text/csv'});
    if(window.navigator.msSaveOrOpenBlob) {
        window.navigator.msSaveBlob(blob, filename);
    }
    else{
        const elem = window.document.createElement('a');
        elem.href = window.URL.createObjectURL(blob);
        elem.download = filename; 

        document.body.appendChild(elem);
        elem.click();        
        document.body.removeChild(elem);

        window.URL.revokeObjectURL(elem.href);
    }
}


function getLBlist() {
    let lbURL  = document.getElementById("lb-url").value;
    
    // if there was an error, don't worry about the rest
    if (displayError(lbURL)) return;  

    // replace button with loading spinner
    let button = buttonDiv.removeChild(buttonDiv.children[0]);
    spinner.spin(buttonDiv);  // defined at bottom of script

    let checkedElements = document
        .querySelectorAll('input[type="checkbox"]:checked');

    // Letterboxd list URLs follow this structure:
    //
    //    https://letterboxd.com/<username>/list/<listname>/
    // 
    // Since `lbURLsplit` is an Array, generated by splitting the URL
    // string on /, we can get the desired elements out of the URL by 
    // indexing into it. This is preferable over forwarding the URL to
    // the server, since it elimates the opportunity to inject a malicious
    // URL into the server.
    var lbURLsplit  = lbURL.split("/").slice(0,-1); // last element is a null string
    const list_name = lbURLsplit.at(-1);  
    const author    = lbURLsplit.at(-3);

    let attr_list = new Array(checkedElements.length);
    for (let i = 0; i < checkedElements.length; i++) {
        attr_list[i] = checkedElements[i].id;
    }

    // attrs array necessitates a custom URL encoding for request URL 
    // (camel-case for Rust API)
    let fetchURL = window.location.href + "/conv?"
        + "list_name="   + list_name + "&"
        + "author_user=" + author    + "&"
        + attr_list
            .map((a) => "attrs="+a)
            .join("&");

    fetch(fetchURL, {credentials: "same-origin"})   // credentials option for testing
        .then((resp) => {
            if (resp.ok) {return resp.text();}
            else {throw new Error(`Request to ${fetchURL} failed with status code ${resp.status}: ${resp.statusText}`)}
        })
        .then((csvText) => {
            save(list_name, csvText)

            // stop spinner and replace button for another request
            spinner.stop();
            buttonDiv.appendChild(button);
        })
        .catch((e) => {
            console.error(`Error occurred in fetching req: ${e}`);
            alert("There was an issue with the server in processing your request. My apologies.");
    });
    
    
    
}

let buttonDiv = document.getElementById("button-container");
let spinner = new Spinner(spinOpts);

document
    .querySelector("button")
    .addEventListener(
        "click", getLBlist
    );