import React from 'react';
import { useRef, useState } from 'react'; 
import { RingLoader } from 'react-spinners';
import { Line } from 'progressbar.js';
import { ListRow, type ListInfo } from '../server-types';


/* 
    Since these functions and constants don't depend on component 
    states, they can be defined outside of it. It also saves time
    and computing power, since the functions will not be redefined
    on every render.
*/

const validAttributes = [
    "actor",
    "additional-directing",
    "additional-photography",
    "art-direction",
    "assistant-director",
    "avg-rating",
    "camera-operator",
    "casting",
    "cast-list",
    "choreography",
    "cinematography",
    "composer",
    "costume-design",
    "country",
    "director",
    "editor",
    "executive-producer",
    "genre",
    "hairstyling",
    "language",
    "lighting",
    "likes",
    "makeup",
    "mini-theme",
    "original-writer",
    "producer",
    "production-design",
    "set-decoration",
    "songs",
    "sound",
    "special-effects",
    "studio",
    "stunts",
    "theme",
    "title-design",
    "visual-effects",
    "watches",
    "writer"
];

const loadingBarOpts = {
    color: "green",
    easing: "easeOut",
    strokeWidth: 3.0,
    text: {
        value: "",
        className: "loading-bar-text", 
        style: null
    },
};

const loadingBarElement = document.createElement("div");

// yes, this is how you sleep in Javascript, so it seems
async function sleepJS(ms: number) {
    return new Promise(r => setTimeout(r, ms));
}


function errorNotify(message: string) {
    console.error(`Error occurred in fetching req: ${message}`);
    if (message['row'] == "422 UNPROCESSABLE CONTENT") {
        alert("The URL entered doesn't appear to be a valid Letterboxd list. \
            Try checking the link and running it again.".replaceAll("  ", ""));
    } 
    else if (message['row'] == "403 FORBIDDEN") {
        alert("The server does not accept conversion requests for \
            lists over 10,000 films long. Is there a shorter list we can try?".replaceAll("  ", ""));
    }
    else { alert("There was an issue with the server in processing your request. \
        My apologies.".replaceAll("  ", "")); }
}

// Letterboxd list URLs follow this structure:
//
//    https://letterboxd.com/<username>/list/<listname>/
// 
// Since `lbURLsplit` is an Array, generated by splitting the URL
// string on  `/`, we can get the desired elements out of the URL by 
// indexing into it. This is preferable over forwarding the URL to
// the server, since it elimates the opportunity to inject a malicious
// URL wholesale into the server.
function parseURL(url: string): ListInfo {

    const lbURLsplit: string[] = url.split("/").slice(0,-1); // last element is a null string

    if (lbURLsplit.length < 3) {
        throw new Error(`Invalid URL: ${url}`)
    }
    const listName = lbURLsplit.at(-1);
    const author   = lbURLsplit.at(-3);

    // TS may be mad, but I've already guarded against these values being undefined
    return {
        listName: listName,
        authorUser: author,
        attrs: new Array()
    }
}


function generateQueryURL(listInfo: ListInfo): string {
    
    var attrsUrlForm = "attrs=none";  // default for empty list
    if (listInfo.attrs.length) {
        attrsUrlForm = listInfo.attrs.map(a => {return "attrs="+a}).join("&");
    }

    const fetchURL = "/lb-list-conv/conv?"
        + "list_name="   + listInfo.listName   + "&"
        + "author_user=" + listInfo.authorUser + "&"
        + attrsUrlForm;
    
    return fetchURL;
}


// pretty much ripped straight from: 
// https://www.tutorialspoint.com/how-to-create-and-save-text-file-in-javascript
// This is also essentially the method used in all answers
// to questions on this topic on StackOverflow, so apparently this is
// the industry standard
function downloadList(listName: string, userList: string[]): void {

    const csvData = userList.join("\n");
    const csvFile = new Blob([csvData], { type: 'text/csv' });
    const dlLink  = document.createElement("a");

    dlLink.href = URL.createObjectURL(csvFile);     // Add file content in the object URL
    dlLink.download = listName;                     // Add file name
    dlLink.click();                                 // fire click event to <a> tag to save file
    URL.revokeObjectURL(dlLink.href);               // URL no longer needed
}


export default function LetterboxdApp() {

    const filmAttributes        = useRef(new Array<string>());  // I need to keep track of these myself, so I've been told
    const loadingBarElementRef  = useRef(loadingBarElement);
    const loadingBar            = useRef<any>(null);            // blank check, to be cashed (cached? later)
    
    const [gettingList,  setGettingList]:  [boolean, Function] = useState(false);
    const [percComplete, setPercComplete]: [number,  Function] = useState(0.0);


    function receiveList(listInfo: ListInfo): void {
        
        const queryURL   = generateQueryURL(listInfo);
        const evtSource  = new EventSource(queryURL, {withCredentials: true});

        var userList     = new Array<string>();

        evtSource.onmessage = (event: MessageEvent) => {

            // double parse to get through escapes
            const msgData: ListRow = JSON.parse(JSON.parse(event.data));  
            userList.push(msgData.rowData);

            // function form so that new value is fresh, and not
            // stale from the time of the closure's definition
            setPercComplete((prevPerc: number) => {
                return (prevPerc + (1/msgData.totalRows));
            });
        };

        // If there is an issue, close out the connection
        evtSource.onerror = (errEvent: Event) => {
    
            if (!errEvent.target) return;   // if the error has null content

            errorNotify(JSON.stringify(errEvent));
            
            setPercComplete(0.0);
            setGettingList(false);
            evtSource.close(); 
        };

        evtSource.addEventListener("complete", (_) => {

            console.debug("Stream complete");
            setGettingList(false);
            setPercComplete(0.0);
            
            //downloadList(`${listInfo.listName}.csv`, userList);
            console.log("downloading!");
            evtSource.close();
        } );
    }

    
    function getList(submitEvent: React.FormEvent<HTMLFormElement>) {

        // Prevent the browser from reloading the page,
        // and from posting the data to the current URL
        // (the default behavior)
        submitEvent.preventDefault();

        const formElement  = submitEvent.currentTarget;
        const listInfoForm = new FormData(formElement);

        if (!listInfoForm.get("list-url")?.toString()) {
            alert("There isn't a URL given; try again with a URL to a list on Letterboxd.com!");
            return;
        }

        const listURL = listInfoForm.get("list-url")?.toString();

        var listInfo: ListInfo;
        try {
            listInfo = parseURL(listURL);
            // sorting so it's nice for the server. may move over to server-side.
            listInfo.attrs = filmAttributes.current.sort(); 
            console.debug(listInfo);
        }
        catch(err) {
            console.error(err)
            return;
        }

        // if nothing goes wrong in the above, THEN we can say we got started
        setGettingList(true);

        receiveList(listInfo);
    }

    // apparently I have to keep track of states in the form where the input
    // elements are React components (bruh)
    function updateFilmAttributes(checkboxEvent: React.ChangeEvent<HTMLInputElement>): void {
        
        // aliasing for simplicity
        const checkbox: HTMLInputElement = checkboxEvent.currentTarget;

        // remove attribute if has been unchecked
        if (!checkbox.checked) {
            var newAttrList = filmAttributes.current;
            const attrIdx = newAttrList.indexOf(checkbox.name)

            // if item is found
            if (attrIdx > -1) { 
                newAttrList.splice(attrIdx, 1); 
                filmAttributes.current = newAttrList;
            }
            // otherwise, don't update filmAttributes if nothing changes
        } 
        // but put it in if it has been checked
        else {
            var newAttrList = filmAttributes.current;
            newAttrList.push(checkboxEvent.currentTarget.name);
            filmAttributes.current = newAttrList;
        }
    }

    function AttributeList() {
        const attrLabels = validAttributes.map(
            (attr: string, idx: number) => {
                return (
                    <label key={idx}>
                        {attr.replaceAll("-", " ")}
                        <input type="checkbox" name={attr} onChange={updateFilmAttributes}/>
                    </label>
                );
            }
        );

        return (
            <div className="checkbox-grid">
                {attrLabels}
            </div>
        );
    }


    // this is a button usually, unless the program is actively getting
    // a Letterboxd list CSV streamed in, then it's either a spinner or
    // loading bar
    function LoadingSpace() {

        if (gettingList && !percComplete) {
            console.debug("sending request...");

            return (
                <RingLoader 
                    className="ring-loader"
                    color={"dodgerblue"}
                    loading={gettingList}
                />
            );
        }

        console.debug(percComplete);

        if (gettingList && percComplete) {
            console.debug("receiving request...");

            if (!loadingBar.current) {
                document.getElementById("button-container")?.appendChild(loadingBarElement);
                loadingBar.current = new Line(loadingBarElement, loadingBarOpts);
            }

            loadingBar.current.animate(percComplete);
            loadingBar.current.setText(
                Math.floor(percComplete * 100).toString() + "%"
            );
            return (
                <div className="loading-bar" ref={loadingBarElementRef} />
            );
        }

        if (loadingBar.current) {
            loadingBar.current.destroy();
            loadingBar.current = false;    // .current is still truthy after it's destroyed somehow
        }

        return (
            <button className="lb-list-submit-button" type="submit">
                Get my list!
            </button>
        );
         
    }

    return (
        <form onSubmit={getList}>
            <h2>Your list's URL:</h2>
            <div className="lb-url-container">
                <input type="url" className="lb-url" name="list-url"
                    placeholder="url of list goes here..." 
                    pattern="https://letterboxd.com/.*"
                    size={80}
                    maxLength={500}
                    required>
                </input>
            </div>
            <h2>The attributes you'd like from it:</h2>
            <AttributeList />
            <div id="button-container">
                <LoadingSpace />
            </div>
        </form>
    );
}

